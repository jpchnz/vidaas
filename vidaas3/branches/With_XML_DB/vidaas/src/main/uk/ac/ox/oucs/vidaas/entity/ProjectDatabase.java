package uk.ac.ox.oucs.vidaas.entity;

// Generated 01-Aug-2011 14:49:06 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * ProjectDatabase generated by hbm2java
 */
@Entity
@Table(name = "project_database", catalog = "vidaas_v3")
@NamedQueries({
    @NamedQuery(name = "ProjectDatabase.findAll", query = "SELECT p FROM ProjectDatabase p"),
    @NamedQuery(name = "ProjectDatabase.findByDatabaseID", query = "SELECT p FROM ProjectDatabase p WHERE p.databaseId = :databaseID"),
    @NamedQuery(name = "ProjectDatabase.findByConnectionString", query = "SELECT p FROM ProjectDatabase p WHERE p.connectionString = :connectionString"),
    @NamedQuery(name = "ProjectDatabase.findByCreationDate", query = "SELECT p FROM ProjectDatabase p WHERE p.creationDate = :creationDate"),
    @NamedQuery(name = "ProjectDatabase.findByDatabaseName", query = "SELECT p FROM ProjectDatabase p WHERE p.databaseName = :databaseName"),
    @NamedQuery(name = "ProjectDatabase.findByDataspaceID", query = "SELECT p FROM ProjectDatabase p WHERE p.dataspace.dataSpaceId = :dataSpaceID")})
public class ProjectDatabase implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2871714213207802303L;
	private Integer databaseId;
	private Dataspace dataspace;
	private WebApplication webApplication;
	private DatabaseStructure databaseStructure;
	private String connectionString;
	private String databaseType;
	private Date creationDate;
	private String databaseName;
	private Set<UserDatabase> userDatabases = new HashSet<UserDatabase>(0);
	private Set<XMLFiles> xmlFiles = new HashSet<XMLFiles>(
			0);

	public ProjectDatabase() {
	}

	public ProjectDatabase(Dataspace dataspace, WebApplication webApplication,
			DatabaseStructure databaseStructure, Date creationDate,
			String databaseName) {
		this.dataspace = dataspace;
		this.webApplication = webApplication;
		this.databaseStructure = databaseStructure;
		this.creationDate = creationDate;
		this.databaseName = databaseName;
	}

	public ProjectDatabase(Dataspace dataspace, WebApplication webApplication,
			DatabaseStructure databaseStructure, String connectionString,
			Date creationDate, String databaseName,
			Set<UserDatabase> userDatabases) {
		this.dataspace = dataspace;
		this.webApplication = webApplication;
		this.databaseStructure = databaseStructure;
		this.connectionString = connectionString;
		this.creationDate = creationDate;
		this.databaseName = databaseName;
		this.userDatabases = userDatabases;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "Database_ID", unique = true, nullable = false)
	public Integer getDatabaseId() {
		return this.databaseId;
	}

	public void setDatabaseId(Integer databaseId) {
		this.databaseId = databaseId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DataSpace_ID", nullable = false)
	@NotNull
	public Dataspace getDataspace() {
		return this.dataspace;
	}

	public void setDataspace(Dataspace dataspace) {
		this.dataspace = dataspace;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Web_ID", nullable = false)
	@NotNull
	public WebApplication getWebApplication() {
		return this.webApplication;
	}

	public void setWebApplication(WebApplication webApplication) {
		this.webApplication = webApplication;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "Structure_ID", nullable = false)
	@NotNull
	public DatabaseStructure getDatabaseStructure() {
		return this.databaseStructure;
	}

	public void setDatabaseStructure(DatabaseStructure databaseStructure) {
		this.databaseStructure = databaseStructure;
	}

	@Column(name = "Connection_String", length = 150)
	@Length(max = 150)
	public String getConnectionString() {
		return this.connectionString;
	}

	public void setConnectionString(String connectionString) {
		this.connectionString = connectionString;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "Creation_Date", nullable = false, length = 10)
	@NotNull
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@Column(name = "Database_Name", nullable = false, length = 50)
	@NotNull
	@Length(max = 50)
	public String getDatabaseName() {
		return this.databaseName;
	}

	public void setDatabaseName(String databaseName) {
		this.databaseName = databaseName;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projectDatabase")
	public Set<UserDatabase> getUserDatabases() {
		return this.userDatabases;
	}

	public void setUserDatabases(Set<UserDatabase> userDatabases) {
		this.userDatabases = userDatabases;
	}

	@Column(name = "Database_Type", nullable = false, length = 50)
	@NotNull
	@Length(max = 50)
	public String getDatabaseType() {
		return databaseType;
	}

	public void setDatabaseType(String databaseType) {
		this.databaseType = databaseType;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projectDatabase")
	public Set<XMLFiles> getXmlFiles() {
		return xmlFiles;
	}

	public void setXmlFiles(Set<XMLFiles> xmlFiles) {
		this.xmlFiles = xmlFiles;
	}
}
