package uk.ac.ox.oucs.vidaas.entity;

// Generated 01-Aug-2011 14:49:06 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * Dataspace generated by hbm2java
 */
@Entity
@Table(name = "dataspace", catalog = "vidaas_v3")
@NamedQueries({
    @NamedQuery(name = "Dataspace.findAll", query = "SELECT d FROM Dataspace d"),
    @NamedQuery(name = "Dataspace.findByDataSpaceID", query = "SELECT d FROM Dataspace d WHERE d.dataSpaceId = :dataSpaceID"),
    @NamedQuery(name = "Dataspace.findByProjectID", query = "SELECT d FROM Dataspace d WHERE d.project.projectId = :projectID"),
    @NamedQuery(name = "Dataspace.findByCreationDate", query = "SELECT d FROM Dataspace d WHERE d.creationDate = :creationDate"),
    @NamedQuery(name = "Dataspace.findByDatabaseBackupPolicy", query = "SELECT d FROM Dataspace d WHERE d.databaseBackupPolicy = :databaseBackupPolicy"),
    @NamedQuery(name = "Dataspace.findByDatabaseDescription", query = "SELECT d FROM Dataspace d WHERE d.databaseDescription = :databaseDescription"),
    @NamedQuery(name = "Dataspace.findByDatabaseExpandablePolicy", query = "SELECT d FROM Dataspace d WHERE d.databaseExpandablePolicy = :databaseExpandablePolicy"),
    @NamedQuery(name = "Dataspace.findByDatabaseSize", query = "SELECT d FROM Dataspace d WHERE d.databaseSize = :databaseSize"),
    @NamedQuery(name = "Dataspace.findByDatabaseType", query = "SELECT d FROM Dataspace d WHERE d.databaseType = :databaseType"),
    @NamedQuery(name = "Dataspace.findByDataspaceName", query = "SELECT d FROM Dataspace d WHERE d.dataspaceName = :dataspaceName"),
    @NamedQuery(name = "Dataspace.findByWebApplicationName", query = "SELECT d FROM Dataspace d WHERE d.webApplicationName = :webApplicationName")})
public class Dataspace implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -5964793228140732309L;
	private Integer dataSpaceId;
	private Project project;
	private Date creationDate;
	private String databaseBackupPolicy;
	private String databaseDescription;
	private String databaseExpandablePolicy;
	private int databaseSize;
	private String databaseType;
	private String dataspaceName;
	private String dataspaceUserFriendlyName;
	private String webApplicationName;
	
	private Set<ProjectDatabase> projectDatabases = new HashSet<ProjectDatabase>(
			0);
	
	private Users users;

	public Dataspace() {
	}

	public Dataspace(Project project, Date creationDate,
			String databaseBackupPolicy, String databaseDescription,
			String databaseExpandablePolicy, int databaseSize,
			String databaseType, String dataspaceName, String webApplicationName) {
		this.project = project;
		this.creationDate = creationDate;
		this.databaseBackupPolicy = databaseBackupPolicy;
		this.databaseDescription = databaseDescription;
		this.databaseExpandablePolicy = databaseExpandablePolicy;
		this.databaseSize = databaseSize;
		this.databaseType = databaseType;
		this.dataspaceName = dataspaceName;
		this.webApplicationName = webApplicationName;
	}

	public Dataspace(Project project, Date creationDate,
			String databaseBackupPolicy, String databaseDescription,
			String databaseExpandablePolicy, int databaseSize,
			String databaseType, String dataspaceName,
			String webApplicationName, Set<ProjectDatabase> projectDatabases) {
		this.project = project;
		this.creationDate = creationDate;
		this.databaseBackupPolicy = databaseBackupPolicy;
		this.databaseDescription = databaseDescription;
		this.databaseExpandablePolicy = databaseExpandablePolicy;
		this.databaseSize = databaseSize;
		this.databaseType = databaseType;
		this.dataspaceName = dataspaceName;
		this.webApplicationName = webApplicationName;
		this.projectDatabases = projectDatabases;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "DataSpace_ID", unique = true, nullable = false)
	public Integer getDataSpaceId() {
		return this.dataSpaceId;
	}

	public void setDataSpaceId(Integer dataSpaceId) {
		this.dataSpaceId = dataSpaceId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Project_ID", nullable = false)
	@NotNull
	public Project getProject() {
		return this.project;
	}

	public void setProject(Project project) {
		this.project = project;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "Creation_Date", nullable = false, length = 10)
	@NotNull
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@Column(name = "Database_Backup_Policy", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getDatabaseBackupPolicy() {
		return this.databaseBackupPolicy;
	}

	public void setDatabaseBackupPolicy(String databaseBackupPolicy) {
		this.databaseBackupPolicy = databaseBackupPolicy;
	}

	@Column(name = "Database_Description", nullable = false, length = 150)
	@NotNull
	@Length(max = 150)
	public String getDatabaseDescription() {
		return this.databaseDescription;
	}

	public void setDatabaseDescription(String databaseDescription) {
		this.databaseDescription = databaseDescription;
	}

	@Column(name = "Database_Expandable_Policy", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getDatabaseExpandablePolicy() {
		return this.databaseExpandablePolicy;
	}

	public void setDatabaseExpandablePolicy(String databaseExpandablePolicy) {
		this.databaseExpandablePolicy = databaseExpandablePolicy;
	}

	@Column(name = "Database_Size", nullable = false)
	public int getDatabaseSize() {
		return this.databaseSize;
	}

	public void setDatabaseSize(int databaseSize) {
		this.databaseSize = databaseSize;
	}

	@Column(name = "Database_Type", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getDatabaseType() {
		return this.databaseType;
	}

	public void setDatabaseType(String databaseType) {
		this.databaseType = databaseType;
	}

	@Column(name = "Dataspace_Name", nullable = false, length = 150)
	@NotNull
	@Length(max = 150)
	public String getDataspaceName() {
		return this.dataspaceName;
	}

	public void setDataspaceName(String dataspaceName) {
		this.dataspaceName = dataspaceName;
	}


	@Column(name = "Dataspace_Friendly_Name", nullable = false, length = 150)
	@NotNull
	@Length(max = 150)
	public String getDataspaceUserFriendlyName() {
		return dataspaceUserFriendlyName;
	}

	public void setDataspaceUserFriendlyName(String dataspaceUserFriendlyName) {
		this.dataspaceUserFriendlyName = dataspaceUserFriendlyName;
	}

	@Column(name = "WebApplicationName", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getWebApplicationName() {
		return this.webApplicationName;
	}

	public void setWebApplicationName(String webApplicationName) {
		this.webApplicationName = webApplicationName;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "dataspace")
	public Set<ProjectDatabase> getProjectDatabases() {
		return this.projectDatabases;
	}

	public void setProjectDatabases(Set<ProjectDatabase> projectDatabases) {
		this.projectDatabases = projectDatabases;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "User_ID", nullable = false)
	@NotNull
	public Users getUsers() {
		return this.users;
	}
	
	public void setUsers(Users users) {
		this.users = users;
	}

}
